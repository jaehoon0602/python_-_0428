# -*- coding: utf-8 -*-
"""tkinter활용해서 성적처리 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g0CjExeCtYikccTw2CyhoW3Hg0M28YRW
"""

import tkinter as tk
from tkinter import ttk
import random

SUBJECTS = ["수학", "영어", "국어"]

def generate_score():
    return {subject: random.randint(0, 100) for subject in SUBJECTS}

def create_school_data():
    return {
        f"{grade}학년": {
            f"{ban}반": {f"학생{i}": generate_score() for i in range(1, 11)}
            for ban in range(1, 6)
        }
        for grade in range(1, 7)
    }

def calculate_class_average(class_data):
    totals = {subject: 0 for subject in SUBJECTS}
    count = len(class_data)
    for scores in class_data.values():
        for subject in totals:
            totals[subject] += scores[subject]
    return {subject: round(total / count, 2) for subject, total in totals.items()}

def calculate_grade_average(grade_data):
    totals = {subject: 0 for subject in SUBJECTS}
    count = 0
    for class_data in grade_data.values():
        for scores in class_data.values():
            for subject in totals:
                totals[subject] += scores[subject]
            count += 1
    return {subject: round(total / count, 2) for subject, total in totals.items()}

def calculate_school_average(school_data):
    totals = {subject: 0 for subject in SUBJECTS}
    count = 0
    for grade_data in school_data.values():
        for class_data in grade_data.values():
            for scores in class_data.values():
                for subject in totals:
                    totals[subject] += scores[subject]
                count += 1
    return {subject: round(total / count, 2) for subject, total in totals.items()}

school_data = create_school_data()

root = tk.Tk()
root.title("성적 처리 프로그램")

grades = [f"{i}학년" for i in range(1, 7)]
bans = [f"{i}반" for i in range(1, 6)]

grade_var = tk.StringVar(value=grades[0])
ban_var = tk.StringVar(value=bans[0])

tk.Label(root, text="학년 선택:").grid(row=0, column=0, padx=5, pady=5)
grade_cb = ttk.Combobox(root, textvariable=grade_var, values=grades, state="readonly", width=7)
grade_cb.grid(row=0, column=1, padx=5, pady=5)

tk.Label(root, text="반 선택:").grid(row=0, column=2, padx=5, pady=5)
ban_cb = ttk.Combobox(root, textvariable=ban_var, values=bans, state="readonly", width=7)
ban_cb.grid(row=0, column=3, padx=5, pady=5)

result_text = tk.Text(root, width=50, height=12)
result_text.grid(row=2, column=0, columnspan=4, padx=10, pady=10)

def show_class_avg():
    grade = grade_var.get()
    ban = ban_var.get()
    class_data = school_data[grade][ban]
    avg = calculate_class_average(class_data)
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, f"{grade} {ban} 평균:\n{avg}\n")

def show_grade_avg():
    grade = grade_var.get()
    grade_data = school_data[grade]
    avg = calculate_grade_average(grade_data)
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, f"{grade} 전체 평균:\n{avg}\n")

def show_school_avg():
    avg = calculate_school_average(school_data)
    result_text.delete("1.0", tk.END)
    result_text.insert(tk.END, f"전교 전체 평균:\n{avg}\n")

def show_all_grade_avg():
    result_text.delete("1.0", tk.END)
    for grade in grades:
        avg = calculate_grade_average(school_data[grade])
        result_text.insert(tk.END, f"{grade} 평균: {avg}\n")

tk.Button(root, text="반 평균", command=show_class_avg, width=10).grid(row=1, column=0, padx=5, pady=5)
tk.Button(root, text="학년 평균", command=show_grade_avg, width=10).grid(row=1, column=1, padx=5, pady=5)
tk.Button(root, text="전교 평균", command=show_school_avg, width=10).grid(row=1, column=2, padx=5, pady=5)
tk.Button(root, text="학년별 전체 평균", command=show_all_grade_avg, width=15).grid(row=1, column=3, padx=5, pady=5)

root.mainloop()