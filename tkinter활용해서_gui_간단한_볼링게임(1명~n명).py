# -*- coding: utf-8 -*-
"""tkinter활용해서 gui 간단한 볼링게임(1명~n명) .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g0CjExeCtYikccTw2CyhoW3Hg0M28YRW
"""

import tkinter as tk
from tkinter import simpledialog, messagebox
import random

class BowlingGame:
    def __init__(self, players):
        self.players = players
        self.current_player = 0
        self.current_frame = 0
        self.roll_in_frame = 0
        self.first_roll = 0
        self.first_rolls = [[0]*10 for _ in range(players)]
        self.second_rolls = [[0]*10 for _ in range(players)]
        self.frame_status = [[0]*10 for _ in range(players)]
        self.frame_scores = [[0]*10 for _ in range(players)]
        self.bonus_rolls = [[0,0] for _ in range(players)]

    def roll(self):
        p = self.current_player
        f = self.current_frame
        if self.roll_in_frame == 0:
            pins = random.randint(0, 10)
            self.first_rolls[p][f] = pins
            if pins == 10:
                self.second_rolls[p][f] = 0
                self.frame_status[p][f] = 2
                self.roll_in_frame = 2
            else:
                self.roll_in_frame = 1
                self.first_roll = pins
            return pins
        elif self.roll_in_frame == 1:
            pins = random.randint(0, 10 - self.first_roll)
            self.second_rolls[p][f] = pins
            if self.first_roll + pins == 10:
                self.frame_status[p][f] = 1
            else:
                self.frame_status[p][f] = 0
            self.roll_in_frame = 2
            return pins

    def next(self):
        self.update_scores()
        if self.roll_in_frame == 2:
            self.roll_in_frame = 0
            self.first_roll = 0
            if self.current_frame < 9:
                self.current_frame += 1
            else:
                self.current_frame = 0
                self.current_player += 1
        if self.current_player >= self.players:
            return False
        return True

    def update_scores(self):
        p = self.current_player
        fr = self.first_rolls[p]
        sr = self.second_rolls[p]
        st = self.frame_status[p]
        fs = self.frame_scores[p]
        for f in range(9):
            if st[f] == 2:
                bonus = fr[f+1] + sr[f+1]
                fs[f] = 10 + bonus
            elif st[f] == 1:
                fs[f] = 10 + fr[f+1]
            else:
                fs[f] = fr[f] + sr[f]
        if st[9] == 2:
            b1 = random.randint(0, 10)
            b2 = random.randint(0, 10 - b1)
            self.bonus_rolls[p] = [b1, b2]
            fs[9] = 10 + b1 + b2
        elif st[9] == 1:
            b1 = random.randint(0, 10)
            self.bonus_rolls[p] = [b1, 0]
            fs[9] = 10 + b1
        else:
            fs[9] = fr[9] + sr[9]

    def get_score(self, player):
        return sum(self.frame_scores[player])

class BowlingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("볼링 게임")
        self.players = 0
        self.game = None

        self.setup_ui()

    def setup_ui(self):
        self.label = tk.Label(self.root, text="플레이어 수를 입력하세요:")
        self.label.pack()
        self.entry = tk.Entry(self.root)
        self.entry.pack()
        self.start_btn = tk.Button(self.root, text="게임 시작", command=self.start_game)
        self.start_btn.pack()

    def start_game(self):
        try:
            n = int(self.entry.get())
            if n < 1 or n > 8:
                raise ValueError
        except ValueError:
            messagebox.showerror("오류", "1~8 사이의 플레이어 수를 입력하세요.")
            return
        self.players = n
        self.game = BowlingGame(n)
        self.label.pack_forget()
        self.entry.pack_forget()
        self.start_btn.pack_forget()
        self.draw_game_ui()

    def draw_game_ui(self):
        self.info = tk.Label(self.root, text="")
        self.info.pack()
        self.roll_btn = tk.Button(self.root, text="굴리기", command=self.roll)
        self.roll_btn.pack()
        self.score_labels = []
        for i in range(self.players):
            lbl = tk.Label(self.root, text=f"플레이어 {i+1} 점수: 0")
            lbl.pack()
            self.score_labels.append(lbl)
        self.update_info()

    def update_info(self):
        p = self.game.current_player
        f = self.game.current_frame
        self.info.config(text=f"플레이어 {p+1} - {f+1}프레임, {'첫' if self.game.roll_in_frame==0 else '두'} 번째 투구")

    def roll(self):
        pins = self.game.roll()
        p = self.game.current_player
        f = self.game.current_frame
        roll_num = self.game.roll_in_frame
        msg = f"플레이어 {p+1} - {f+1}프레임, {'첫' if roll_num==1 else '두'} 투구: {pins}핀!"
        messagebox.showinfo("결과", msg)
        if self.game.roll_in_frame == 2:
            if not self.game.next():
                self.show_result()
                return
        self.update_scores()
        self.update_info()

    def update_scores(self):
        for i in range(self.players):
            score = self.game.get_score(i)
            self.score_labels[i].config(text=f"플레이어 {i+1} 점수: {score}")

    def show_result(self):
        scores = [self.game.get_score(i) for i in range(self.players)]
        winner = scores.index(max(scores)) + 1
        msg = "\n".join([f"플레이어 {i+1}: {score}점" for i, score in enumerate(scores)])
        msg += f"\n\n우승자: 플레이어 {winner}!"
        messagebox.showinfo("게임 종료", msg)
        self.root.quit()

if __name__ == "__main__":
    root = tk.Tk()
    app = BowlingApp(root)
    root.mainloop()